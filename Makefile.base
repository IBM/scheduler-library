CPU ?= ariane
ARCH ?= riscv
ifdef DO_CROSS_COMPILATION
CROSS_COMPILE ?= riscv64-unknown-linux-gnu-
endif

ifdef COMPILE_TO_ESP
ESP_ROOT ?= ../../esp
ESP_DRIVERS ?= $(ESP_ROOT)/soft/$(CPU)/drivers
endif

CC = gcc -std=c99


INCDIR ?=
INCDIR += -I./include
ifdef COMPILE_TO_ESP
INCDIR += -I$(ESP_DRIVERS)/include
endif

CFLAGS ?= -O
CFLAGS += $(INCDIR)
CFLAGS += -DINT_TIME
ifdef COMPILE_TO_ESP
CFLAGS += -DCOMPILE_TO_ESP
endif
#  -- ALWAYS use this one! --   ifdef CONFIG_ESP_INTERFACE
CFLAGS += -DUSE_ESP_INTERFACE
#   endif

# This sets the maximum number of any Acceleartor type in this build
#  This should be equal to the largest number of any of FFT, SM_FFT, etc.
#  But it could be a larger value as well
ifdef CONFIG_MAX_ACCEL_ANY_TYPE
CFLAGS += -DMAX_ACCEL_OF_EACH_TYPE=$(CONFIG_MAX_ACCEL_ANY_TYPE)
endif

# This selects the number of each Acceleartor type:
# MAX for the CPU is up to you -- that is "spawned CPU threads"
# MAX for others is determined by the hardware run on
ifdef CONFIG_NUM_CPU
CFLAGS += -DNUM_CPU_ACCEL=$(CONFIG_NUM_CPU)
endif
ifdef CONFIG_NUM_LG_VIT
CFLAGS += -DNUM_LG_VIT_ACCEL=$(CONFIG_NUM_LG_VIT)
endif
ifdef CONFIG_NUM_LG_FFT
CFLAGS += -DNUM_LG_FFT_ACCEL=$(CONFIG_NUM_LG_FFT)
endif
ifdef CONFIG_NUM_LG_CV
CFLAGS += -DNUM_LG_CV_ACCEL=$(CONFIG_NUM_LG_CV)
endif
# This sets the number of "Medium" accelerators
#  Currently, these are the same physical accelerators but executed more slowly
#  As such, the max for the two combined is the hardware implemented Accelerators, e.g.
#  NUM_FFT_ACCEL plus NUM_SM_FFT_ACCEL <= Actual_HWR_FFT_Accel
ifdef CONFIG_NUM_MD_VIT
CFLAGS += -DNUM_MD_VIT_ACCEL=$(CONFIG_NUM_MD_VIT)
endif
# This sets the number of "Small" accelerators
#  Currently, these are the same physical accelerators but executed more slowly
#  As such, the max for the two combined is the hardware implemented Accelerators, e.g.
ifdef CONFIG_NUM_SM_VIT
CFLAGS += -DNUM_SM_VIT_ACCEL=$(CONFIG_NUM_SM_VIT)
endif
ifdef CONFIG_NUM_SM_FFT
CFLAGS += -DNUM_SM_FFT_ACCEL=$(CONFIG_NUM_SM_FFT)
endif
ifdef CONFIG_NUM_SM_CV
CFLAGS += -DNUM_SM_CV_ACCEL=$(CONFIG_NUM_SM_CV)
endif

# These set the "speed" factor of the accelerators
#  This is a "slow-down multiplier" factor, e.g. 2 => 2x as long to finish
# First the "Large" Accelerators
ifdef CONFIG_LG_FFT_X
CFLAGS += -DLgFFTx=$(CONFIG_LG_FFT_X)
endif
ifdef CONFIG_LG_VIT_X
CFLAGS += -DLgVITx=$(CONFIG_LG_VIT_X)
endif
ifdef CONFIG_LG_CV_X
CFLAGS += -DLgCVx=$(CONFIG_LG_CV_X)
endif

# Then the "Medium Accelerators
ifdef CONFIG_MD_VIT_X
CFLAGS += -DMdVITx=$(CONFIG_MD_VIT_X)
endif

# Then the "Small" Accelerators
ifdef CONFIG_SM_FFT_X
CFLAGS += -DSmFFTx=$(CONFIG_SM_FFT_X)
endif
ifdef CONFIG_SM_VIT_X
CFLAGS += -DSmVITx=$(CONFIG_SM_VIT_X)
endif
ifdef CONFIG_SM_CV_X
CFLAGS += -DSmCVx=$(CONFIG_SM_CV_X)
endif

 
ifdef CONFIG_FFT_EN
CFLAGS += -DHW_FFT
CFLAGS += -DUSE_FFT_FX=$(CONFIG_FFT_FX)
endif
ifdef CONFIG_FFT_BITREV
CFLAGS += -DHW_FFT_BITREV
endif
ifdef CONFIG_VITERBI_EN
CFLAGS += -DHW_VIT
endif
ifdef CONFIG_KERAS_CV_BYPASS
CFLAGS += -DBYPASS_KERAS_CV_CODE
endif
ifdef CONFIG_CV_EN
CFLAGS += -DHW_CV
endif
ifdef CONFIG_FAKE_CV_EN
CFLAGS += -DFAKE_HW_CV
endif
ifdef CONFIG_CV_ONLY_HWR
CFLAGS += -DHW_ONLY_CV
endif
ifdef CONFIG_VERBOSE
CFLAGS += -DVERBOSE
endif
ifdef CONFIG_DBG_THREADS
CFLAGS += -DDBG_THREADS
endif
ifdef CONFIG_GDB
CFLAGS += -g
endif

LDLIBS ?=
ifdef COMPILE_TO_ESP
LDLIBS += -L$(ESP_DRIVERS)/contig_alloc
LDLIBS += -L$(ESP_DRIVERS)/test
LDLIBS += -L$(ESP_DRIVERS)/libesp
endif

LDFLAGS ?=
LDFLAGS += -lm
LDFLAGS += -lpthread
ifdef COMPILE_TO_ESP
LDFLAGS += -lrt
LDFLAGS += -lesp
LDFLAGS += -ltest
LDFLAGS += -lcontig
endif

SRC_T = $(foreach f, $(wildcard src/*.c), $(shell basename $(f)))
SRC_D = $(wildcard src/*.c)
HDR_T = $(wildcard include/*.h)
OBJ_T = $(SRC_T:%.c=obj_t/%.o)
OBJ_S = $(SRC_T:%.c=obj_s/%.o)

VPATH = ./src

TARGET=test-scheduler
STARGET=test-scheduler-sim

all: obj_t obj_s $(TARGET) $(STARGET)

obj_t/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< -o $@

obj_s/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DUSE_SIM_ENVIRON -c $< -o $@

$(OBJ_T): $(HDR_T)

$(TARGET): obj_t $(TARGET).exe
	echo "Done building $@"

$(STARGET): obj_s $(STARGET).exe
	echo "Done building $@"

$(TARGET).exe: $(OBJ_T)
ifdef COMPILE_TO_ESP
	CROSS_COMPILE=$(CROSS_COMPILE) $(MAKE) -C $(ESP_DRIVERS)/contig_alloc/ libcontig.a
	CROSS_COMPILE=$(CROSS_COMPILE) $(MAKE) -C $(ESP_DRIVERS)/test
	CROSS_COMPILE=$(CROSS_COMPILE) $(MAKE) -C $(ESP_DRIVERS)/libesp
endif
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

$(STARGET).exe: $(OBJ_S)
ifdef COMPILE_TO_ESP
	CROSS_COMPILE=$(CROSS_COMPILE) $(MAKE) -C $(ESP_DRIVERS)/contig_alloc/ libcontig.a
	CROSS_COMPILE=$(CROSS_COMPILE) $(MAKE) -C $(ESP_DRIVERS)/test
	CROSS_COMPILE=$(CROSS_COMPILE) $(MAKE) -C $(ESP_DRIVERS)/libesp
endif
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $^ -o $@ $(LDFLAGS)

clean:
	$(RM) $(OBJ_T) $(OBJ_S) $(TARGET) $(STARGET)
	$(RM) -r obj_t obj_s

clobber: clean


obj_t:
	mkdir $@

obj_s:
	mkdir $@

.PHONY: all clean


#depend:;	makedepend -fMakefile -- $(CFLAGS) -- $(SRC_D)
# DO NOT DELETE THIS LINE -- make depend depends on it.

src/read_trace.o: ./include/kernels_api.h ./include/verbose.h
src/read_trace.o: ./include/base_types.h ./include/calc_fmcw_dist.h
src/read_trace.o: ./include/utils.h
src/read_trace.o: ./include/sim_environs.h
src/getopt.o: ./include/getopt.h
src/descrambler_function.o: ./include/base.h ./include/utils.h
src/descrambler_function.o: ./include/viterbi_standalone.h
src/viterbi_flat.o: ./include/base.h ./include/utils.h
src/viterbi_flat.o: ./include/viterbi_flat.h ./include/verbose.h
src/viterbi_flat.o: ./include/viterbi_standalone.h ./include/scheduler.h
src/viterbi_flat.o: ./include/base_types.h
src/scheduler.o: ./include/getopt.h ./include/utils.h
src/scheduler.o: ./include/verbose.h
src/scheduler.o: ./include/scheduler.h ./include/base_types.h
src/scheduler.o: ./include/calc_fmcw_dist.h
src/sim_environs.o: ./include/kernels_api.h ./include/verbose.h
src/sim_environs.o: ./include/base_types.h ./include/calc_fmcw_dist.h
src/sim_environs.o: ./include/utils.h
src/sim_environs.o: ./include/sim_environs.h
src/cpu_vit_accel.o: ./include/base.h ./include/utils.h
src/cpu_vit_accel.o: ./include/viterbi_flat.h ./include/verbose.h
src/cpu_vit_accel.o: ./include/viterbi_standalone.h
src/viterbi_standalone.o: ./include/base.h ./include/utils.h
src/viterbi_standalone.o: ./include/viterbi_flat.h
src/viterbi_standalone.o: ./include/verbose.h
src/main.o: ./include/getopt.h ./include/verbose.h ./include/scheduler.h
src/main.o: ./include/base_types.h
src/main.o: ./include/kernels_api.h ./include/calc_fmcw_dist.h
src/main.o: ./include/utils.h ./include/sim_environs.h
src/calculate_dist_from_fmcw.o: ./include/fft-1d.h
src/calculate_dist_from_fmcw.o: ./include/calc_fmcw_dist.h
qsrc/calculate_dist_from_fmcw.o: ./include/scheduler.h ./include/base_types.h
src/cpu_fft_accel.o: ./include/scheduler.h
src/cpu_fft_accel.o: ./include/base_types.h ./include/fft-1d.h
src/cpu_fft_accel.o: ./include/calc_fmcw_dist.h
src/timer.o: ./include/timer.h
src/kernels_api.o: ./include/kernels_api.h
src/kernels_api.o: ./include/verbose.h ./include/base_types.h
src/kernels_api.o: ./include/calc_fmcw_dist.h
src/kernels_api.o: ./include/utils.h ./include/read_trace.h
src/kernels_api.o: ./include/viterbi_flat.h ./include/base.h
