CPU ?= ariane
ARCH ?= riscv
ifdef DO_CROSS_COMPILATION
 CROSS_COMPILE ?= riscv64-unknown-linux-gnu-
 EXE_EXTENSION=-RV
endif

ifdef COMPILE_TO_ESP
 ESP_ROOT ?= $(realpath ../../esp)
 ESP_DRIVERS ?= $(ESP_ROOT)/soft/common/drivers
 ESP_DRV_LINUX  = $(ESP_DRIVERS)/linux
endif

CC = gcc -std=c99


INCDIR ?=
INCDIR += -I./include
ifdef COMPILE_TO_ESP
 INCDIR += -I$(ESP_DRIVERS)/common/include
 INCDIR += -I$(ESP_DRIVERS)/linux/include
endif

CFLAGS ?= -O3 -g
CFLAGS += $(INCDIR)
CFLAGS += -DINT_TIME
ifdef COMPILE_TO_ESP
 CFLAGS += -DCOMPILE_TO_ESP
endif
#  -- ALWAYS use this one! --   ifdef CONFIG_ESP_INTERFACE
CFLAGS += -DUSE_ESP_INTERFACE
#   endif

# This sets the maximum number of any Acceleartor type in this build
#  This should be equal to the largest number of any of FFT, VIT, CV, etc.
#  But it could be a larger value as well
ifdef CONFIG_MAX_ACCEL_ANY_TYPE
CFLAGS += -DMAX_ACCEL_OF_EACH_TYPE=$(CONFIG_MAX_ACCEL_ANY_TYPE)
endif

# This selects the number of each Acceleartor type:
# MAX for the CPU is up to you -- that is "spawned CPU threads"
# MAX for others is determined by the hardware run on
ifdef CONFIG_NUM_CPU
CFLAGS += -DNUM_CPU_ACCEL=$(CONFIG_NUM_CPU)
endif
ifdef CONFIG_NUM_VIT
CFLAGS += -DNUM_VIT_ACCEL=$(CONFIG_NUM_VIT)
endif
ifdef CONFIG_NUM_FFT
CFLAGS += -DNUM_FFT_ACCEL=$(CONFIG_NUM_FFT)
endif
ifdef CONFIG_NUM_CV
CFLAGS += -DNUM_CV_ACCEL=$(CONFIG_NUM_CV)
endif

SW_STR = S
FA_STR =
VA_STR =
CA_STR =
CB_STR =
ifdef CONFIG_FFT_EN
 SW_STR =
 FA_STR = F$(CONFIG_FFT_ACCEL_VER)
 CFLAGS += -DHW_FFT
 CFLAGS += -DUSE_FFT_FX=$(CONFIG_FFT_FX)
 CFLAGS += -DUSE_FFT_ACCEL_VERSION=$(CONFIG_FFT_ACCEL_VER)
 CFLAGS += -DFFT_DEV_BASE='"$(FFT_DEVICE_BASE)"'
endif
ifdef CONFIG_FFT_BITREV
 CFLAGS += -DHW_FFT_BITREV
endif

ifdef CONFIG_VITERBI_EN
 SW_STR =
 VA_STR = V
 CFLAGS += -DHW_VIT
 CFLAGS += -DVIT_DEV_BASE='"$(VIT_DEVICE_BASE)"'
endif

ifdef CONFIG_KERAS_CV_BYPASS
 CFLAGS += -DBYPASS_KERAS_CV_CODE
else
 CFLAGS += -I/usr/include/python2.7
endif

ifdef CONFIG_CV_EN
 SW_STR =
 CA_STR = CH
 CFLAGS += -DHW_CV
 #CFLAGS += -DCNN_DEV_BASE='"$(CNN_DEVICE_BASE)"' -I/usr/include/python2.7
else # Not using the HWR accelerator
 SW_STR =
 CA_STR = CF
 CFLAGS += -DFAKE_HW_CV
endif

ifdef CONFIG_CV_ONLY_HWR
 SW_STR =
 CB_STR = o
 CFLAGS += -DHW_ONLY_CV
endif

ifdef CONFIG_VERBOSE
CFLAGS += -DVERBOSE
endif

ifdef CONFIG_FUSED_MAP
CFLAGS += -DWRITE_FUSED_MAPS
endif
ifdef CONFIG_GDB
CFLAGS += -g
endif

LDLIBS ?=
ifdef COMPILE_TO_ESP
 LDLIBS += -L$(ESP_BUILD_DRIVERS)/contig_alloc
 LDLIBS += -L$(ESP_BUILD_DRIVERS)/test
 LDLIBS += -L$(ESP_BUILD_DRIVERS)/libesp
endif
ifndef CONFIG_KERAS_CV_BYPASS
 LDLIBS += 
endif
LDFLAGS ?=
LDFLAGS += -lm
LDFLAGS += -lpthread
LDFLAGS += -ldl -rdynamic
ifdef COMPILE_TO_ESP
 LDFLAGS += -lrt
 LDFLAGS += -lesp
 LDFLAGS += -ltest
 LDFLAGS += -lcontig
endif
ifndef CONFIG_KERAS_CV_BYPASS
 LDFLAGS += -lpython2.7
endif

SRC_T = $(foreach f, $(wildcard src/*.c), $(shell basename $(f)))
SRC_P = $(foreach f, $(wildcard src/policies/*.c), $(shell basename $(f)))
SRC_D = $(wildcard src/*.c)
HDR_T = $(wildcard include/*.h)
OBJ_T = $(SRC_T:%.c=obj_t/%.o)
OBJ_S = $(SRC_T:%.c=obj_s/%.o)
OBJ_P = $(SRC_P:%.c=obj_p/%.so)
LIB_P = $(SRC_P:lib%.c=-l%)
LDLIBS += -L./obj_p/

VPATH = ./src ./src/policies

#ifdef CONFIG_FFT_EN
# TARGET=test-scheduler$(EXE_EXTENSION)-fft$(CONFIG_FFT_ACCEL_VER)
# STARGET=test-scheduler-sim$(EXE_EXTENSION)-fft$(CONFIG_FFT_ACCEL_VER)
#else
TARGET=test-scheduler$(EXE_EXTENSION)-$(SW_STR)$(FA_STR)$(VA_STR)$(CA_STR)$(CB_STR)-P$(CONFIG_NUM_CPU)V$(CONFIG_NUM_VIT)F$(CONFIG_NUM_FFT)N$(CONFIG_NUM_CV)
STARGET=test-scheduler-sim$(EXE_EXTENSION)-$(SW_STR)$(FA_STR)$(VA_STR)$(CA_STR)$(CB_STR)-P$(CONFIG_NUM_CPU)V$(CONFIG_NUM_VIT)F$(CONFIG_NUM_FFT)N$(CONFIG_NUM_CV)
#endif

$(info $$EXE_EXTENSION is [${EXE_EXTENSION}])
$(info $$TARGET is [${TARGET}])
$(info $$STARGET is [${STARGET}])


all: esp-libs $(TARGET) $(STARGET) obj_p $(OBJ_P)

ESP_BUILD_DRIVERS     = esp-build/drivers

esp-build:
	@mkdir -p $(ESP_BUILD_DRIVERS)/contig_alloc
	@mkdir -p $(ESP_BUILD_DRIVERS)/esp
	@mkdir -p $(ESP_BUILD_DRIVERS)/esp_cache
	@mkdir -p $(ESP_BUILD_DRIVERS)/libesp
	@mkdir -p $(ESP_BUILD_DRIVERS)/probe
	@mkdir -p $(ESP_BUILD_DRIVERS)/test
	@mkdir -p $(ESP_BUILD_DRIVERS)/utils/baremetal
	@mkdir -p $(ESP_BUILD_DRIVERS)/utils/linux
	@ln -sf $(ESP_DRV_LINUX)/contig_alloc/* $(ESP_BUILD_DRIVERS)/contig_alloc
	@ln -sf $(ESP_DRV_LINUX)/esp/* $(ESP_BUILD_DRIVERS)/esp
	@ln -sf $(ESP_DRV_LINUX)/esp_cache/* $(ESP_BUILD_DRIVERS)/esp_cache
	@ln -sf $(ESP_DRV_LINUX)/driver.mk $(ESP_BUILD_DRIVERS)
	@ln -sf $(ESP_DRV_LINUX)/include $(ESP_BUILD_DRIVERS)
	@ln -sf $(ESP_DRV_LINUX)/../common $(ESP_BUILD_DRIVERS)/../common

esp-build-clean:

esp-build-distclean: esp-build-clean
	$(QUIET_CLEAN)$(RM) -rf esp-build

ifdef COMPILE_TO_ESP
esp-libs: esp-build
	  CROSS_COMPILE=$(CROSS_COMPILE) DRIVERS=$(ESP_DRV_LINUX) $(MAKE) -C $(ESP_BUILD_DRIVERS)/contig_alloc/ libcontig.a
	  cd $(ESP_BUILD_DRIVERS)/test; CROSS_COMPILE=$(CROSS_COMPILE) BUILD_PATH=$$PWD $(MAKE) -C $(ESP_DRV_LINUX)/test
	  cd $(ESP_BUILD_DRIVERS)/libesp; CROSS_COMPILE=$(CROSS_COMPILE) BUILD_PATH=$$PWD $(MAKE) -C $(ESP_DRV_LINUX)/libesp
	  cd $(ESP_BUILD_DRIVERS)/utils; CROSS_COMPILE=$(CROSS_COMPILE) BUILD_PATH=$$PWD $(MAKE) -C $(ESP_DRV_LINUX)/utils
else
esp-libs: 

endif
.PHONY: esp-build-clean esp-build-distclean esp-libs


obj_t/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -c $< -o $@

obj_s/%.o: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -DUSE_SIM_ENVIRON -c $< -o $@

obj_p/%.so: %.c
	$(CROSS_COMPILE)$(CC) $(CFLAGS) -shared -fPIC $< -o $@


$(OBJ_T): $(HDR_T)

$(TARGET): obj_t $(OBJ_T)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $(OBJ_T) -o $@ $(LDFLAGS)

$(STARGET): obj_s $(OBJ_S)
	$(CROSS_COMPILE)$(CC) $(LDLIBS) $(OBJ_S) -o $@ $(LDFLAGS)



clean:
	$(RM) $(OBJ_T) $(OBJ_S) $(OBJ_P) $(TARGET) $(STARGET)
	$(RM) -r obj_t obj_s obj_p

clobber: clean
	$(RM) $(TARGET)
	$(RM) $(STARGET)
	$(RM) -rf obj_t obj_s
	$(RM) -rf esp-build


obj_t:
	mkdir $@

obj_s:
	mkdir $@

obj_p:
	mkdir $@


.PHONY: all clean


#depend:;	makedepend -fMakefile -- $(CFLAGS) -- $(SRC_D)
# DO NOT DELETE THIS LINE -- make depend depends on it.

src/read_trace.o: ./include/kernels_api.h ./include/verbose.h
src/read_trace.o: ./include/base_types.h ./include/calc_fmcw_dist.h
src/read_trace.o: ./include/utils.h
src/read_trace.o: ./include/sim_environs.h
src/getopt.o: ./include/getopt.h
src/descrambler_function.o: ./include/base.h ./include/utils.h
src/descrambler_function.o: ./include/viterbi_standalone.h
src/viterbi_flat.o: ./include/base.h ./include/utils.h
src/viterbi_flat.o: ./include/viterbi_flat.h ./include/verbose.h
src/viterbi_flat.o: ./include/viterbi_standalone.h ./include/scheduler.h
src/viterbi_flat.o: ./include/base_types.h
src/scheduler.o: ./include/getopt.h ./include/utils.h
src/scheduler.o: ./include/verbose.h
src/scheduler.o: ./include/scheduler.h ./include/base_types.h
src/scheduler.o: ./include/calc_fmcw_dist.h
src/sim_environs.o: ./include/kernels_api.h ./include/verbose.h
src/sim_environs.o: ./include/base_types.h ./include/calc_fmcw_dist.h
src/sim_environs.o: ./include/utils.h
src/sim_environs.o: ./include/sim_environs.h
src/cpu_vit_accel.o: ./include/base.h ./include/utils.h
src/cpu_vit_accel.o: ./include/viterbi_flat.h ./include/verbose.h
src/cpu_vit_accel.o: ./include/viterbi_standalone.h
src/viterbi_standalone.o: ./include/base.h ./include/utils.h
src/viterbi_standalone.o: ./include/viterbi_flat.h
src/viterbi_standalone.o: ./include/verbose.h
src/main.o: ./include/getopt.h ./include/verbose.h ./include/scheduler.h
src/main.o: ./include/base_types.h
src/main.o: ./include/kernels_api.h ./include/calc_fmcw_dist.h
src/main.o: ./include/utils.h ./include/sim_environs.h
src/calculate_dist_from_fmcw.o: ./include/fft-1d.h
src/calculate_dist_from_fmcw.o: ./include/calc_fmcw_dist.h
qsrc/calculate_dist_from_fmcw.o: ./include/scheduler.h ./include/base_types.h
src/cpu_fft_accel.o: ./include/scheduler.h
src/cpu_fft_accel.o: ./include/base_types.h ./include/fft-1d.h
src/cpu_fft_accel.o: ./include/calc_fmcw_dist.h
src/timer.o: ./include/timer.h
src/kernels_api.o: ./include/kernels_api.h
src/kernels_api.o: ./include/verbose.h ./include/base_types.h
src/kernels_api.o: ./include/calc_fmcw_dist.h
src/kernels_api.o: ./include/utils.h ./include/read_trace.h
src/kernels_api.o: ./include/viterbi_flat.h ./include/base.h
